generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model cash_donation {
  id                                    Int                          @id @default(autoincrement())
  amount                                String                       @db.VarChar(255)
  receipt_no                            String                       @db.VarChar(255)
  payment_method                        cash_donation_payment_method
  is_donor_member                       Boolean?                     @default(false)
  donors_name                           String                       @db.VarChar(255)
  donatedBy                             Int?
  receivedBy                            Int?
  phone_number                          String?                      @db.VarChar(50)
  email                                 String?                      @db.VarChar(255)
  createdAt                             DateTime                     @default(now()) @db.Timestamp(0)
  users_cash_donation_receivedByTousers users?                       @relation("cash_donation_receivedByTousers", fields: [receivedBy], references: [id], onUpdate: Restrict, map: "cash_donation_ibfk_1")
  users_cash_donation_donatedByTousers  users?                       @relation("cash_donation_donatedByTousers", fields: [donatedBy], references: [id], onUpdate: Restrict, map: "cash_donation_ibfk_2")

  @@index([donatedBy], map: "donatedBy")
  @@index([receivedBy], map: "receivedBy")
}

model donated_item {
  id                Int            @id @default(autoincrement())
  description       String         @db.VarChar(255)
  items_donation_id Int
  createdAt         DateTime       @default(now()) @db.Timestamp(0)
  items_donation    items_donation @relation(fields: [items_donation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "donated_item_ibfk_1")

  @@index([items_donation_id], map: "items_donation_id")
}

model items_donation {
  id                                     Int            @id @default(autoincrement())
  is_donor_member                        Boolean?       @default(false)
  doners_name                            String         @db.VarChar(255)
  donatedBy                              Int?
  receivedBy                             Int?
  phone_number                           String?        @db.VarChar(50)
  email                                  String?        @db.VarChar(255)
  createdAt                              DateTime       @default(now()) @db.Timestamp(0)
  donated_item                           donated_item[]
  users_items_donation_donatedByTousers  users?         @relation("items_donation_donatedByTousers", fields: [donatedBy], references: [id], onUpdate: Restrict, map: "items_donation_ibfk_1")
  users_items_donation_receivedByTousers users?         @relation("items_donation_receivedByTousers", fields: [receivedBy], references: [id], onUpdate: Restrict, map: "items_donation_ibfk_2")

  @@index([donatedBy], map: "donatedBy")
  @@index([receivedBy], map: "receivedBy")
}



model role_permissions {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  role_id   Int?
  createdAt DateTime @default(now()) @db.Timestamp(0)
  roles     roles?   @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "role_permissions_ibfk_1")

  @@index([role_id], map: "role_id")
}

model roles {
  id               Int                @id @default(autoincrement())
  title            String             @db.VarChar(255)
  description      String             @db.Text
  createdAt        DateTime           @default(now()) @db.Timestamp(0)
  role_permissions role_permissions[]
  user_roles       user_roles[]
}

model user_roles {
  id        Int      @id @default(autoincrement())
  user_id   Int
  role_id   Int
  createdAt DateTime @default(now()) @db.Timestamp(0)
  users     users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_roles_ibfk_1")
  roles     roles    @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_roles_ibfk_2")

  @@index([role_id], map: "role_id")
  @@index([user_id], map: "user_id")
}

model users {
  id                                              Int              @id @default(autoincrement())
  first_name                                      String           @db.VarChar(255)
  last_name                                       String           @db.VarChar(255)
  country                                         String           @db.VarChar(255)
  city                                            String?          @db.VarChar(255)
  is_active                                       Boolean?         @default(false)
  is_admin                                        Boolean?         @default(false)
  is_approved                                     Boolean?         @default(false)
  approvedBy                                      Int?
  deactivatedBy                                   Int?
  phone_number                                    String           @unique(map: "phone_number") @db.VarChar(50)
  email                                           String?          @unique(map: "email") @db.VarChar(100)
  password                                        String?          @db.Text
  createdAt                                       DateTime         @default(now()) @db.Timestamp(0)
  approvedAt                                      DateTime         @default(now()) @db.Timestamp(0)
  cash_donation_cash_donation_receivedByTousers   cash_donation[]  @relation("cash_donation_receivedByTousers")
  cash_donation_cash_donation_donatedByTousers    cash_donation[]  @relation("cash_donation_donatedByTousers")
  items_donation_items_donation_donatedByTousers  items_donation[] @relation("items_donation_donatedByTousers")
  items_donation_items_donation_receivedByTousers items_donation[] @relation("items_donation_receivedByTousers")
  user_roles                                      user_roles[]
  users_users_approvedByTousers                   users?           @relation("users_approvedByTousers", fields: [approvedBy], references: [id], onUpdate: Restrict, map: "users_ibfk_1")
  other_users_users_approvedByTousers             users[]          @relation("users_approvedByTousers")
  users_users_deactivatedByTousers                users?           @relation("users_deactivatedByTousers", fields: [deactivatedBy], references: [id], onUpdate: Restrict, map: "users_ibfk_2")
  other_users_users_deactivatedByTousers          users[]          @relation("users_deactivatedByTousers")

  @@index([approvedBy], map: "approvedBy")
  @@index([deactivatedBy], map: "deactivatedBy")
}

enum cash_donation_payment_method {
  bank
  mpesa
  cash
  paypal
  card_transfers @map("card transfers")
}
